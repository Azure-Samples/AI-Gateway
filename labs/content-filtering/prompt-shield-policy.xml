<policies>
    <inbound>
        <set-variable name="SubscriptionKey" value="@(context.Request.Headers.GetValueOrDefault("api-key"))" />
        <send-request mode="new" response-variable-name="safetyResponse">
            <set-url>@("https://" + context.Request.Headers.GetValueOrDefault("Host") + "/contentsafety/text:shieldPrompt?api-version=2024-02-15-preview")</set-url>
            <set-method>POST</set-method>
            <set-header name="Ocp-Apim-Subscription-Key" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault<string>("SubscriptionKey"))</value>
            </set-header>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                string[] documents = new string[] {};
                string[] messages = context.Request.Body.As<JObject>(preserveContent: true)["messages"].Select(m => m.Value<string>("content")).ToArray();
                JObject obj = new JObject();		
                JProperty userProperty = new JProperty("userPrompt", string.Concat(messages));
                JProperty documentsProperty = new JProperty("documents", new JArray(documents));
                obj.Add(userProperty);
                obj.Add(documentsProperty);
                return obj.ToString();
            }</set-body>
        </send-request>
        <choose>
            <when condition="@(((IResponse)context.Variables["safetyResponse"]).StatusCode == 200)">
                <choose>
                    <when condition="@((bool)((IResponse)context.Variables["safetyResponse"]).Body.As<JObject>()["userPromptAnalysis"]["attackDetected"] == true)">
                        <!-- Return 401 Unauthorized with http-problem payload -->
                        <return-response>
                            <set-status code="400" reason="Bad Request" />
                            <set-body>@{ 
                        var errorResponse = new
                        {
                            error = new
                            {
                                message = "The prompt was identified as an attack by the Azure AI Content Safety service."
                            }
                        };                            
                        return JsonConvert.SerializeObject(errorResponse);
                    }</set-body>
                        </return-response>
                    </when>
                </choose>
            </when>
            <otherwise>
                <return-response>
                    <set-status code="500" reason="Internal Server Error" />
                </return-response>
            </otherwise>
        </choose>
        <base />
        <authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" />
        <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value>
        </set-header>
        <set-backend-service backend-id="{backend-id}" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>