<policies>
    <inbound>
        <base />
        <!-- Extract key parameters from the request -->
        <set-variable name="providerId" value="@(context.Request.Headers.GetValueOrDefault("providerId", ""))" />
        <set-variable name="authorizationId" value="@(context.Request.Headers.GetValueOrDefault("authorizationId", ""))" />
        <set-variable name="postLoginRedirectUrl" value="@(context.Request.Headers.GetValueOrDefault("postLoginRedirectUrl", ""))" />
        <!-- Construct the full ARM resource ID for the authorization -->
        <set-variable name="authorizationArmId" value="@("https://management.azure.com/subscriptions/{{SubscriptionId}}/resourceGroups/{{ResourceGroupId}}/providers/Microsoft.ApiManagement/service/{{ServiceId}}/authorizationProviders/" + ((string)context.Variables["providerId"]) + "/authorizations/" + ((string)context.Variables["authorizationId"]))" />
        <!-- Check if the authorization already exists -->
        <send-request mode="new" response-variable-name="authorizationResult" timeout="20" ignore-error="false">
            <set-url>@{
                return ((string)context.Variables["authorizationArmId"]) + "?api-version={{ARMAPIVersion}}";
            }</set-url>
            <set-method>GET</set-method>
            <authentication-managed-identity resource="https://management.azure.com/" />
        </send-request>
        <choose>
            <!-- Case 1: Authorization doesn't exist (404) - Create a new one -->
            <when condition="@(((IResponse)context.Variables["authorizationResult"]).StatusCode == 404)">
                <!-- Create a new authorization with OAuth2 authorization code flow -->
                <send-request mode="new" response-variable-name="authorizationCreatedResult" timeout="20" ignore-error="true">
                    <set-url>@{
                        return ((string)context.Variables["authorizationArmId"]) + "?api-version={{ARMAPIVersion}}";
                    }</set-url>
                    <set-method>PUT</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                                return JsonConvert.SerializeObject(new { properties = new { authorizationType = "oauth2", oauth2grantType = "authorizationCode" } });
                    }</set-body>
                    <authentication-managed-identity resource="https://management.azure.com/" />
                </send-request>
                <choose>
                    <!-- If authorization was created successfully -->
                    <when condition="@(((IResponse)context.Variables["authorizationCreatedResult"]).StatusCode == 200)">
                        <!-- Add access policy to the authorization (assigns permissions) -->
                        <send-request mode="new" response-variable-name="authorizationPermissionCreatedResult" timeout="20" ignore-error="true">
                            <set-url>@{
                                    return ((string)context.Variables["authorizationArmId"]) + "/accesspolicies/{{ManagedIdentityObjectId}}?api-version={{ARMAPIVersion}}";
                                }</set-url>
                            <set-method>PUT</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                            return JsonConvert.SerializeObject(new { properties = new { objectId = "{{ManagedIdentityObjectId}}", tenantId = "{{TenantId}}" } });
                                }</set-body>
                            <authentication-managed-identity resource="https://management.azure.com/" />
                        </send-request>
                        <!-- Get login links to redirect the user for authentication -->
                        <send-request mode="new" response-variable-name="getLoginLinksResult" timeout="20" ignore-error="true">
                            <set-url>@{
                                return ((string)context.Variables["authorizationArmId"]) + "/getLoginLinks?api-version={{ARMAPIVersion}}";
                            }</set-url>
                            <set-method>POST</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                return JsonConvert.SerializeObject(new { postLoginRedirectUrl =  ((string)context.Variables["postLoginRedirectUrl"]) });
                            }</set-body>
                            <authentication-managed-identity resource="https://management.azure.com/" />
                        </send-request>
                        <!-- Return 401 with the login link so client can redirect user to authenticate -->
                        <return-response>
                            <set-status code="401" reason="Unauthorized" />
                            <set-body>@{
                                var response = ((IResponse)context.Variables["getLoginLinksResult"]).Body.As<JObject>();
                                var loginUrl = response["loginLink"].ToString();
                                return new JObject(
                                    new JProperty("loginUrl", loginUrl)
                                ).ToString();
                            }</set-body>
                        </return-response>
                    </when>
                    <otherwise />
                </choose>
            </when>
            <!-- Case 2: Authorization exists but has an ERROR status - Need to re-authenticate -->
            <when condition="@(((IResponse)context.Variables["authorizationResult"]).StatusCode == 200 && ((string)(((IResponse)context.Variables["authorizationResult"]).Body.As<JObject>()["properties"]["status"])).ToUpper().Equals("ERROR") )">
                <!-- Get login links for re-authentication -->
                <send-request mode="new" response-variable-name="getLoginLinksResult" timeout="20" ignore-error="true">
                    <set-url>@{
                                return ((string)context.Variables["authorizationArmId"]) + "/getLoginLinks?api-version={{ARMAPIVersion}}";
                            }</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                                return JsonConvert.SerializeObject(new { postLoginRedirectUrl =  ((string)context.Variables["postLoginRedirectUrl"]) });
                            }</set-body>
                    <authentication-managed-identity resource="https://management.azure.com/" />
                </send-request>
                <!-- Return 401 with the login link for re-authentication -->
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-body>@{
                                var response = ((IResponse)context.Variables["getLoginLinksResult"]).Body.As<JObject>();
                                return response["loginLink"].ToString();
                            }</set-body>
                </return-response>
            </when>
            <!-- Case 3: Authorization exists and is valid - Allow the request -->
            <otherwise>
                <return-response>
                    <set-status code="200" />
                    <set-header name="auth-result" exists-action="override">
                        <value>@{return ((string)context.Variables["authorizationArmId"]) + "?api-version={{ARMAPIVersion}}";}</value>
                    </set-header>
                    <set-body>Success!</set-body>
                </return-response>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>