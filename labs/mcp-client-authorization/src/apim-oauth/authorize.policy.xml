<!--
    AUTHORIZE POLICY
    This policy implements the authorization endpoint for PKCE OAuth2 flow with Entra ID.
    
    Flow:
    1. MCP client calls this endpoint with code_challenge and code_challenge_method
    2. We generate a code verifier and challenge for Entra ID
    3. We generate a confirmation code to return to the MCP client later
    4. We redirect the user to Entra ID login page
    5. After authentication, Entra ID will redirect back to the callback endpoint
-->
<policies>
    <inbound>
        <base />
        <!-- STEP 1: Retrieve PKCE parameters from MCP Client request -->
        <set-variable name="mcpClientCodeChallenge" value="@((string)context.Request.Url.Query.GetValueOrDefault("code_challenge", ""))" />
        <set-variable name="mcpClientCodeChallengeMethod" value="@((string)context.Request.Url.Query.GetValueOrDefault("code_challenge_method", ""))" />
        <!-- STEP 2: Generate PKCE parameters for Entra ID authentication -->
        <!-- Generate a random code verifier for Entra ID -->
        <set-variable name="codeVerifier" value="@((string)Guid.NewGuid().ToString().Replace("-", ""))" />
        <!-- Set the code challenge method for Entra ID -->
        <set-variable name="codeChallengeMethod" value="S256" />
        <!-- Generate a code challenge using SHA-256 for Entra ID -->
        <set-variable name="codeChallenge" value="@{
            using (var sha256 = System.Security.Cryptography.SHA256.Create())
            {
                var bytes = System.Text.Encoding.UTF8.GetBytes((string)context.Variables.GetValueOrDefault("codeVerifier", ""));
                var hash = sha256.ComputeHash(bytes);
                return System.Convert.ToBase64String(hash).TrimEnd('=').Replace('+', '-').Replace('/', '_');
            }
            }" />
        <!-- STEP 3: Extract client information and create state parameter -->
        <set-variable name="clientId" value="@((string)context.Request.Url.Query.GetValueOrDefault("client_id", ""))" />
        <set-variable name="state" value="@((string)Guid.NewGuid().ToString())" />
        <!-- STEP 4: Construct the Entra ID authorization URL -->
        <!-- Base URL for Entra ID authorization endpoint -->
        <set-variable name="baseAuthUrl" value="https://login.microsoftonline.com/{{EntraIDTenantId}}/oauth2/v2.0/authorize?response_type=code" />
        <!-- Add client ID parameter -->
        <set-variable name="clientIdParam" value="@(string.Concat("&client_id=", context.Variables.GetValueOrDefault("clientId", "")))" />        
        <!-- Add PKCE parameters -->
        <set-variable name="codeChallengeParam" value="@(string.Concat("&code_challenge=", context.Variables.GetValueOrDefault("codeChallenge", "")))" />
        <set-variable name="codeChallengeMethodParam" value="@(string.Concat("&code_challenge_method=", context.Variables.GetValueOrDefault("codeChallengeMethod", "")))" />
        <!-- Add OAuth callback parameter -->
        <set-variable name="redirectUriParam" value="@(string.Concat("&redirect_uri=", "{{OAuthCallbackUri}}" ))" />        
        <!-- Add required scope parameter -->
        <set-variable name="scopeParam" value="@(string.Concat("&scope={{OAuthScopes}}"))" />
        <!-- Add state parameter for security -->
        <set-variable name="stateParam" value="@(string.Concat("&state=", context.Variables.GetValueOrDefault("state", "")))" />
          <!-- Combine all parts to form the complete authorization URL with PKCE params -->
        <set-variable name="authUrl" value="@(string.Concat(
            context.Variables.GetValueOrDefault("baseAuthUrl", ""), 
            context.Variables.GetValueOrDefault("clientIdParam", ""), 
            context.Variables.GetValueOrDefault("codeChallengeParam", ""), 
            context.Variables.GetValueOrDefault("codeChallengeMethodParam", ""), 
            context.Variables.GetValueOrDefault("redirectUriParam", ""), 
            context.Variables.GetValueOrDefault("scopeParam", ""), 
            context.Variables.GetValueOrDefault("stateParam", "")))" />        
        <!-- STEP 5: Store authentication data in cache for use in callback -->
        <!-- Generate a confirmation code to return to the MCP client -->
        <set-variable name="mcpConfirmConsentCode" value="@((string)Guid.NewGuid().ToString())" />
        
        <!-- Store code verifier for token exchange -->
        <cache-store-value duration="700" 
            key="CodeVerifier-@(context.Variables.GetValueOrDefault("state", ""))" 
            value="@(context.Variables.GetValueOrDefault("codeVerifier", ""))" />
        
        <!-- Map state to MCP confirmation code for callback -->
        <cache-store-value duration="700" 
            key="@((string)context.Variables.GetValueOrDefault("state"))" 
            value="@(context.Variables.GetValueOrDefault("mcpConfirmConsentCode", ""))" />
        
        <!-- Store MCP client PKCE data for verification during token exchange -->
        <cache-store-value duration="700" 
            key="@($"McpClientAuthData-{context.Variables.GetValueOrDefault("mcpConfirmConsentCode")}")" 
            value="@{
                // Create a JObject and populate it with values
                return new JObject{
                    ["mcpClientCodeChallenge"] = (string)context.Variables.GetValueOrDefault("mcpClientCodeChallenge", ""),
                    ["mcpClientCodeChallengeMethod"] = (string)context.Variables.GetValueOrDefault("mcpClientCodeChallengeMethod", "")
                }.ToString();
            }" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />        
        <!-- Return the response with a 302 status code for redirect -->
        <return-response>
            <set-status code="302" reason="Found" />
            <set-header name="Location" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault("authUrl", ""))</value>
            </set-header>
        </return-response>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>